version: "3.7"

volumes:
  proton-logs: {}

services:
  proton:
    image: ghcr.io/timeplus-io/proton:latest
    pull_policy: always
    ports:
      - "3218:3218"
      - "8463:8463"
    volumes:
      - proton-logs:/var/log/proton-server
    healthcheck:
      test: ["CMD", "curl", "http://localhost:3218/proton/ping"]
      interval: 2s
      timeout: 10s
      retries: 3
      start_period: 10s

  kafka:
    command:
      - redpanda
      - start
      - --kafka-addr internal://0.0.0.0:9092,external://0.0.0.0:19092
      - --advertise-kafka-addr internal://kafka:9092,external://localhost:19092
      - --pandaproxy-addr internal://0.0.0.0:8082,external://0.0.0.0:18082
      - --advertise-pandaproxy-addr internal://kafka:8082,external://localhost:18082
      - --schema-registry-addr internal://0.0.0.0:8081,external://0.0.0.0:18081
      - --rpc-addr kafka:33145
      - --advertise-rpc-addr kafka:33145
      - --smp 1
      - --memory 1G
      - --mode dev-container
      - --default-log-level=debug
    image: docker.redpanda.com/redpandadata/redpanda:v23.1.3
    container_name: kafka
    ports:
      - 18081:18081
      - 18082:18082
      - 19092:19092
      - 19644:9644
    healthcheck:
      test: ["CMD-SHELL", "rpk cluster health | grep -E 'Healthy:.+true' || exit 1"]
      interval: 15s
      timeout: 3s
      retries: 5
      start_period: 5s

  beats:
    image: docker.elastic.co/beats/filebeat:8.11.1
    user: root
    pull_policy: always
    command: ["filebeat", "-e","-c", "/etc/filebeat.yml"]
    volumes:
      - proton-logs:/var/log/proton-server
      - ./config/filebeat.yml:/etc/filebeat.yml
    depends_on:
      proton:
        condition: service_healthy
      kafka:
        condition: service_healthy

  init-stream:
    image: ghcr.io/timeplus-io/proton:latest
    command:
      - sh
      - -c
      - |
        proton-client -h proton --query "CREATE EXTERNAL STREAM IF NOT EXISTS logs(raw string) ENGINE = ExternalStream SETTINGS type = 'kafka', brokers = 'kafka:9092', topic = 'logs'"
    depends_on:
      beats:
        condition: service_started



  